{"version":3,"file":"element.min.js","sources":["../../../src/app/block/element.js"],"sourcesContent":["import Sortable from 'local_pxsdk/sortablejs';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string, get_strings} from \"core/str\";\nimport Ajax from \"core/ajax\";\n\nexport default class BlockElement {\n    /**\n     * @type {BaseFactory}\n     */\n    #baseFactory;\n\n    /**\n     * @type {HTMLElement}\n     */\n    #element;\n\n    /**\n     * @type {CourseElement}\n     */\n    #course;\n\n    /**\n     * @type {QueueElement}\n     */\n    #queue;\n\n    /**\n     * @type {ItemElement[]}\n     */\n    #items = [];\n\n    /**\n     * @type {Sortable|NULL}\n     */\n    #sortable = null;\n\n    /**\n     * @type {ItemElement|NULL}\n     */\n    #clipboardItem = null;\n\n    /**\n     * @type {Boolean}\n     */\n    #canBackupUserdata = false;\n\n    /**\n     * @type {Boolean}\n     */\n    #canAnonymizeUserdata = false;\n\n    /**\n     * @param {BaseFactory} baseFactory\n     * @param {HTMLElement} element\n     * @param {Boolean} canBackupUserdata\n     * @param {Boolean} canAnonymizeUserdata\n     */\n    constructor(baseFactory, element, canBackupUserdata, canAnonymizeUserdata) {\n        this.#baseFactory = baseFactory;\n        this.#element = element;\n        this.#canBackupUserdata = canBackupUserdata;\n        this.#canAnonymizeUserdata = canAnonymizeUserdata;\n    }\n\n    addEventListeners() {\n        this.setupCourse();\n        this.setupQueue();\n        this.setupItems();\n    }\n\n    setupCourse() {\n        const course = document.querySelector('.course-content');\n\n        const courseElement = this.#baseFactory.block().course().element(this, course);\n        courseElement.addBackupToSharingCartButtons();\n\n        this.#course = courseElement;\n    }\n\n    setupQueue() {\n        const queue = document.querySelector('.sharing_cart_queue');\n\n        this.#queue = this.#baseFactory.block().queue().element(this, queue);\n    }\n\n    setupItems() {\n        const items = this.#element.querySelectorAll('.sharing_cart_item');\n\n        items.forEach((element) => {\n            this.setupItem(element);\n        });\n\n        this.#sortable = new Sortable(this.#element.querySelector('.sharing_cart_items'), {\n            dataIdAttr: 'data-itemid',\n            onUpdate: (evt) => {\n                Ajax.call([{\n                    methodname: 'block_sharing_cart_reorder_sharing_cart_items',\n                    args: {\n                        item_ids: this.#sortable.toArray(),\n                    },\n                    fail: (data) => {\n                        console.error(data);\n                    }\n                }]);\n            }\n        });\n    }\n\n    /**\n     * @param {HTMLElement} element\n     */\n    setupItem(element) {\n        const itemElement = this.#baseFactory.block().item().element(this, element);\n\n        this.#element.querySelector('.no-items')?.remove();\n\n        this.#items.push(\n            itemElement\n        );\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async setClipboard(item) {\n        this.#clipboardItem = item;\n\n        await this.#course.setClipboard(item);\n    }\n\n    clearClipboard() {\n        this.#clipboardItem = null;\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    deleteItem(item) {\n        Ajax.call([{\n            methodname: 'block_sharing_cart_delete_item_from_sharing_cart',\n            args: {\n                item_id: item.getItemId(),\n            },\n            done: async (deleted) => {\n                if (deleted) {\n                    const childItems = item.getItemChildrenRecursively();\n                    childItems.forEach((childItem) => {\n                        const index = this.#items.findIndex((i) => i.getItemId() === Number.parseInt(childItem.dataset.itemid));\n                        if (index === -1) {\n                            return;\n                        }\n\n                        if (this.#items[index].getItemId() === this.#clipboardItem?.getItemId()) {\n                            this.#course.clearClipboard();\n                        }\n\n                        this.#items.splice(index, 1);\n                        childItem.remove();\n                    });\n\n                    const index = this.#items.findIndex((i) => i.getItemId() === item.getItemId());\n                    if (this.#items[index].getItemId() === this.#clipboardItem?.getItemId()) {\n                        this.#course.clearClipboard();\n                    }\n\n                    this.#items.splice(index, 1);\n                    item.remove();\n\n                    if (this.#items.length === 0) {\n                        this.#element.querySelector('.sharing_cart_items')\n                            .innerHTML = await get_string('no_items', 'block_sharing_cart');\n                    }\n                } else {\n                    console.error('Failed to delete item');\n                }\n            },\n            fail: (data) => {\n                console.error(data);\n            }\n        }]);\n    }\n\n    /**\n     * @param {String} itemName\n     * @param {CallableFunction} onSave\n     * @return {Promise<Modal>}\n     */\n    async createBackupItemToSharingCartModal(itemName, onSave) {\n        const strings = await get_strings([\n            {\n                key: 'backup_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'into_sharing_cart',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'backup',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const {html, js} = await this.#baseFactory.moodle().template().renderTemplate(\n            'block_sharing_cart/modal/backup_to_sharing_cart_modal_body',\n            {\n                show_user_data_backup: this.#canBackupUserdata,\n                show_anonymize_user_data: this.#canBackupUserdata && this.#canAnonymizeUserdata,\n            }\n        );\n\n        /**\n         * @type {Modal}\n         */\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[0] + ': \"' + itemName.slice(0, 50).trim() + '\" ' + strings[1],\n            body: html,\n            buttons: {\n                save: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n        modal.getRoot().on(ModalEvents.shown, () => this.#baseFactory.moodle().template().runTemplateJS(js));\n        modal.getRoot().on(ModalEvents.save, () => {\n            const modalUserdataCheckbox = document.getElementById('modal-userdata-checkbox');\n            const modalAnonymizeCheckbox = document.getElementById('modal-anonymize-checkbox');\n\n            onSave({\n                users: modalUserdataCheckbox.checked ?? false,\n                anonymize: modalAnonymizeCheckbox.checked ?? false\n            });\n        });\n\n        return modal;\n    }\n\n    /**\n     * @param {Number} sectionId\n     */\n    async addSectionBackupToSharingCart(sectionId) {\n        const sectionName = this.#course.getSectionName(sectionId);\n\n        const modal = await this.createBackupItemToSharingCartModal(sectionName, (settings) => {\n            Ajax.call([{\n                methodname: 'block_sharing_cart_backup_section_into_sharing_cart',\n                args: {\n                    section_id: sectionId,\n                    settings: settings\n                },\n                done: async (data) => {\n                    await this.renderItem(data);\n                },\n                fail: (data) => {\n                    console.error(data);\n                }\n            }]);\n        });\n\n        await modal.show();\n    }\n\n    /**\n     * @param {Number} courseModuleId\n     */\n    async addCourseModuleBackupToSharingCart(courseModuleId) {\n        const courseModuleName = this.#course.getCourseModuleName(courseModuleId);\n\n        const modal = await this.createBackupItemToSharingCartModal(courseModuleName, (settings) => {\n            Ajax.call([{\n                methodname: 'block_sharing_cart_backup_course_module_into_sharing_cart',\n                args: {\n                    course_module_id: courseModuleId,\n                    settings: settings\n                },\n                done: async (data) => {\n                    await this.renderItem(data);\n                },\n                fail: (data) => {\n                    console.error(data);\n                }\n            }]);\n        });\n        await modal.show();\n    }\n\n    /**\n     * @param {Object} item\n     */\n    async renderItem(item) {\n        const existingItemIndex = this.#items.findIndex((i) => i.getItemId() === item.id);\n        const existingItem = this.#items[existingItemIndex] ?? false;\n        const oldElement = this.#element.querySelector('.sharing_cart_items .sharing_cart_item[data-itemid=\"' + item.id + '\"]');\n        if (existingItem && oldElement) {\n            const element = await this.#baseFactory.moodle().template().createElementFromFragment(\n                'block_sharing_cart',\n                'item',\n                1,\n                {\n                    item_id: item.id,\n                }\n            );\n\n            this.#element.querySelector('.sharing_cart_items').replaceChild(element, oldElement);\n            this.#items[existingItemIndex] = this.#baseFactory.block().item().element(this, element);\n\n            element.querySelectorAll('.sharing_cart_item').forEach((subItem) => {\n                this.setupItem(subItem);\n            });\n\n            return;\n        }\n\n        const element = await this.#baseFactory.moodle().template().createElementFromTemplate(\n            'block_sharing_cart/block/item',\n            {\n                id: item.id,\n                name: item.name,\n                type: item.type,\n                status: 0,\n                status_awaiting: true,\n                has_run_now: true,\n                task_id: item.task_id ?? null,\n                status_finished: false,\n                status_failed: false,\n                is_module: item.type !== 'section',\n                is_section: item.type === 'section',\n                is_root: true,\n            }\n        );\n        this.#element.querySelector('.sharing_cart_items').prepend(element);\n\n        this.setupItem(element);\n    }\n\n    /**\n     * @param {ItemElement} item\n     * @param {Number} sectionId\n     * @param {HTMLElement} modal\n     */\n    importItem(item, sectionId, modal) {\n        this.#course.clearClipboard();\n\n        const courseModuleIds = [];\n        modal.querySelectorAll('input[type=\"checkbox\"][data-type=\"coursemodule\"]:checked').forEach((checkbox) => {\n            courseModuleIds.push(checkbox.dataset.id);\n        });\n\n        if (item.isSection() && courseModuleIds.length === 0) {\n            modal.querySelectorAll('.form-check-input').forEach(async (item) => {\n                item.setCustomValidity(\n                    await get_string('atleast_one_course_module_must_be_included', 'block_sharing_cart')\n                );\n                item.reportValidity();\n            });\n            return false;\n        }\n\n        Ajax.call([{\n            methodname: 'block_sharing_cart_restore_item_from_sharing_cart_into_section',\n            args: {\n                item_id: item.getItemId(),\n                section_id: sectionId,\n                course_modules_to_include: courseModuleIds,\n            },\n            done: async (success) => {\n                if (success) {\n                    await this.#queue.loadQueue(true);\n                }\n            },\n            fail: (data) => {\n                console.error(data);\n            }\n        }]);\n    }\n\n    /**\n     * @param {ItemElement} item\n     * @param {Number} sectionId\n     * @param {Event} e\n     */\n    async confirmImportBackupFromSharingCart(item, sectionId, e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const strings = await get_strings([\n            {\n                key: 'copy_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'into_section',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'import',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const sectionName = this.#course.getSectionName(sectionId);\n\n        const {html, js} = await this.#baseFactory.moodle().template().renderFragment(\n            'block_sharing_cart',\n            'item_restore_form',\n            1,\n            {\n                item_id: item.getItemId()\n            }\n        );\n\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[0] + ': ' +\n                '\"' + item.getItemName().slice(0, 50).trim() + '\"' +\n                strings[1] + ': ' +\n                '\"' + sectionName.slice(0, 50).trim() + '\"',\n            body: html,\n            buttons: {\n                save: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n        modal.getRoot().on(ModalEvents.shown, () => this.#baseFactory.moodle().template().runTemplateJS(js));\n        modal.getRoot().on(ModalEvents.save, this.importItem.bind(this, item, sectionId, modal.getRoot()[0]));\n        await modal.show();\n    }\n}"],"names":["constructor","baseFactory","element","canBackupUserdata","canAnonymizeUserdata","addEventListeners","setupCourse","setupQueue","setupItems","course","document","querySelector","courseElement","_classPrivateFieldGet","block","this","addBackupToSharingCartButtons","queue","querySelectorAll","forEach","setupItem","Sortable","dataIdAttr","onUpdate","evt","call","methodname","args","item_ids","toArray","fail","data","console","error","itemElement","item","remove","push","setClipboard","clearClipboard","deleteItem","item_id","getItemId","done","async","deleted","getItemChildrenRecursively","childItem","index","findIndex","i","Number","parseInt","dataset","itemid","_classPrivateFieldGet3","splice","_classPrivateFieldGet4","length","innerHTML","itemName","onSave","strings","key","component","html","js","moodle","template","renderTemplate","show_user_data_backup","show_anonymize_user_data","modal","ModalFactory","create","type","types","SAVE_CANCEL","title","slice","trim","body","buttons","save","cancel","removeOnClose","getRoot","on","ModalEvents","shown","runTemplateJS","modalUserdataCheckbox","getElementById","modalAnonymizeCheckbox","users","checked","anonymize","sectionId","sectionName","getSectionName","createBackupItemToSharingCartModal","settings","section_id","renderItem","show","courseModuleId","courseModuleName","getCourseModuleName","course_module_id","existingItemIndex","id","existingItem","oldElement","createElementFromFragment","replaceChild","subItem","createElementFromTemplate","name","status","status_awaiting","has_run_now","task_id","status_finished","status_failed","is_module","is_section","is_root","prepend","importItem","courseModuleIds","checkbox","isSection","setCustomValidity","reportValidity","course_modules_to_include","success","loadQueue","e","preventDefault","stopPropagation","renderFragment","getItemName","bind"],"mappings":"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"}