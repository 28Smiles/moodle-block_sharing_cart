{"version":3,"file":"element.min.js","sources":["../../../src/app/block/element.js"],"sourcesContent":["import Sortable from '../../lib/sortablejs';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string, get_strings} from \"core/str\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\nexport default class BlockElement {\n    /**\n     * @type {BaseFactory}\n     */\n    #baseFactory;\n\n    /**\n     * @type {HTMLElement}\n     */\n    #element;\n\n    /**\n     * @type {CourseElement}\n     */\n    #course;\n\n    /**\n     * @type {QueueElement}\n     */\n    #queue;\n\n    /**\n     * @type {ItemElement[]}\n     */\n    #items = [];\n\n    /**\n     * @type {Sortable|NULL}\n     */\n    #sortable = null;\n\n    /**\n     * @type {ItemElement|NULL}\n     */\n    #clipboardItem = null;\n\n    /**\n     * @type {Boolean}\n     */\n    #canBackupUserdata = false;\n\n    /**\n     * @type {Boolean}\n     */\n    #canAnonymizeUserdata = false;\n\n    /**\n     * @type {Number|null}\n     */\n    #draggedCourseModuleId = null;\n\n    /**\n     * @type {Number|null}\n     */\n    #draggedSectionId = null;\n\n    /**\n     * @param {BaseFactory} baseFactory\n     * @param {HTMLElement} element\n     * @param {Boolean} canBackupUserdata\n     * @param {Boolean} canAnonymizeUserdata\n     */\n    constructor(baseFactory, element, canBackupUserdata, canAnonymizeUserdata) {\n        this.#baseFactory = baseFactory;\n        this.#element = element;\n        this.#canBackupUserdata = canBackupUserdata;\n        this.#canAnonymizeUserdata = canAnonymizeUserdata;\n    }\n\n    addEventListeners() {\n        this.setupCourse();\n        this.setupQueue();\n        this.setupItems();\n        this.setupDragAndDrop();\n    }\n\n    setupCourse() {\n        const course = document.querySelector('.course-content');\n\n        const courseElement = this.#baseFactory.block().course().element(this, course);\n        courseElement.addBackupToSharingCartButtons();\n\n        this.#course = courseElement;\n    }\n\n    setupQueue() {\n        const queue = document.querySelector('.sharing_cart_queue');\n\n        this.#queue = this.#baseFactory.block().queue().element(this, queue);\n    }\n\n    setupItems() {\n        const items = this.#element.querySelectorAll('.sharing_cart_item');\n\n        items.forEach((element) => {\n            this.setupItem(element);\n        });\n\n        this.#sortable = new Sortable(this.#element.querySelector('.sharing_cart_items'), {\n            dataIdAttr: 'data-itemid',\n            onUpdate: () => {\n                Ajax.call([{\n                    methodname: 'block_sharing_cart_reorder_sharing_cart_items',\n                    args: {\n                        item_ids: this.#sortable.toArray(),\n                    },\n                    fail: (data) => {\n                        Notification.exception(data);\n                    }\n                }]);\n            }\n        });\n    }\n\n    setupDragAndDrop() {\n        const dropZone = this.#element;\n        const draggableCourseModules = document.querySelectorAll('.course-content .activity[data-for=\"cmitem\"][data-id]');\n        const draggableSections = document.querySelectorAll('.course-content .section[data-for=\"section\"][data-id]');\n\n        draggableCourseModules.forEach((courseModule) => {\n            const courseModuleId = Number.parseInt(courseModule.dataset.id);\n            if (!courseModuleId) {\n                return;\n            }\n\n            courseModule.addEventListener('dragstart', () => {\n                this.#draggedCourseModuleId = courseModuleId;\n                dropZone.classList.add('dragging_item');\n            });\n            courseModule.addEventListener('dragend', () => {\n                this.#draggedCourseModuleId = null;\n                dropZone.classList.remove('dragging_item');\n            });\n        });\n        draggableSections.forEach((section) => {\n            const id = Number.parseInt(section.dataset.id);\n            if (!id) {\n                return;\n            }\n\n            const draggable = section.querySelector('.course-section-header');\n\n            draggable.addEventListener('dragstart', () => {\n                this.#draggedSectionId = id;\n                dropZone.classList.add('dragging_item');\n            });\n            draggable.addEventListener('dragend', () => {\n                this.#draggedSectionId = null;\n                dropZone.classList.remove('dragging_item');\n            });\n        });\n\n        dropZone.addEventListener('dragover', (e) => {\n            if (!this.#draggedSectionId && !this.#draggedCourseModuleId) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n        });\n        dropZone.addEventListener('dragleave', (e) => {\n            if (!this.#draggedSectionId && !this.#draggedCourseModuleId) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n        });\n        dropZone.addEventListener('drop', async (e) => {\n            if (!this.#draggedSectionId && !this.#draggedCourseModuleId) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (this.#draggedSectionId) {\n                await this.addSectionBackupToSharingCart(this.#draggedSectionId);\n            } else if (this.#draggedCourseModuleId) {\n                await this.addCourseModuleBackupToSharingCart(this.#draggedCourseModuleId);\n            }\n        });\n    }\n\n    /**\n     * @param {HTMLElement} element\n     */\n    setupItem(element) {\n        const itemElement = this.#baseFactory.block().item().element(this, element);\n\n        this.#element.querySelector('.no-items')?.remove();\n\n        this.#items.push(\n            itemElement\n        );\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async setClipboard(item) {\n        this.#clipboardItem = item;\n\n        await this.#course.setClipboard(item);\n    }\n\n    clearClipboard() {\n        this.#clipboardItem = null;\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    deleteItem(item) {\n        Ajax.call([{\n            methodname: 'block_sharing_cart_delete_item_from_sharing_cart',\n            args: {\n                item_id: item.getItemId(),\n            },\n            done: async (deleted) => {\n                if (deleted) {\n                    const childItems = item.getItemChildrenRecursively();\n                    childItems.forEach((childItem) => {\n                        const index = this.#items.findIndex((i) => i.getItemId() === Number.parseInt(childItem.dataset.itemid));\n                        if (index === -1) {\n                            return;\n                        }\n\n                        if (this.#items[index].getItemId() === this.#clipboardItem?.getItemId()) {\n                            this.#course.clearClipboard();\n                        }\n\n                        this.#items.splice(index, 1);\n                        childItem.remove();\n                    });\n\n                    const index = this.#items.findIndex((i) => i.getItemId() === item.getItemId());\n                    if (this.#items[index].getItemId() === this.#clipboardItem?.getItemId()) {\n                        this.#course.clearClipboard();\n                    }\n\n                    this.#items.splice(index, 1);\n                    item.remove();\n\n                    if (this.#items.length === 0) {\n                        this.#element.querySelector('.sharing_cart_items')\n                            .innerHTML = await get_string('no_items', 'block_sharing_cart');\n                    }\n                } else {\n                    await Notification.alert('Failed to delete item');\n                }\n            },\n            fail: (data) => {\n                Notification.exception(data);\n            }\n        }]);\n    }\n\n    /**\n     * @param {String} itemName\n     * @param {CallableFunction} onSave\n     * @return {Promise<Modal>}\n     */\n    async createBackupItemToSharingCartModal(itemName, onSave) {\n        const strings = await get_strings([\n            {\n                key: 'backup_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'into_sharing_cart',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'backup',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const {html, js} = await this.#baseFactory.moodle().template().renderTemplate(\n            'block_sharing_cart/modal/backup_to_sharing_cart_modal_body',\n            {\n                show_user_data_backup: this.#canBackupUserdata,\n                show_anonymize_user_data: this.#canBackupUserdata && this.#canAnonymizeUserdata,\n            }\n        );\n\n        /**\n         * @type {Modal}\n         */\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[0] + ': \"' + itemName.slice(0, 50).trim() + '\" ' + strings[1],\n            body: html,\n            buttons: {\n                save: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n        modal.getRoot().on(ModalEvents.shown, () => this.#baseFactory.moodle().template().runTemplateJS(js));\n        modal.getRoot().on(ModalEvents.save, () => {\n            const modalUserdataCheckbox = document.getElementById('modal-userdata-checkbox');\n            const modalAnonymizeCheckbox = document.getElementById('modal-anonymize-checkbox');\n\n            onSave({\n                users: modalUserdataCheckbox.checked ?? false,\n                anonymize: modalAnonymizeCheckbox.checked ?? false\n            });\n        });\n\n        return modal;\n    }\n\n    /**\n     * @param {Number} sectionId\n     */\n    async addSectionBackupToSharingCart(sectionId) {\n        const sectionName = this.#course.getSectionName(sectionId);\n\n        const modal = await this.createBackupItemToSharingCartModal(sectionName, (settings) => {\n            Ajax.call([{\n                methodname: 'block_sharing_cart_backup_section_into_sharing_cart',\n                args: {\n                    section_id: sectionId,\n                    settings: settings\n                },\n                done: async (data) => {\n                    await this.renderItem(data);\n                },\n                fail: (data) => {\n                    Notification.exception(data);\n                }\n            }]);\n        });\n\n        await modal.show();\n    }\n\n    /**\n     * @param {Number} courseModuleId\n     */\n    async addCourseModuleBackupToSharingCart(courseModuleId) {\n        const courseModuleName = this.#course.getCourseModuleName(courseModuleId);\n\n        const modal = await this.createBackupItemToSharingCartModal(courseModuleName, (settings) => {\n            Ajax.call([{\n                methodname: 'block_sharing_cart_backup_course_module_into_sharing_cart',\n                args: {\n                    course_module_id: courseModuleId,\n                    settings: settings\n                },\n                done: async (data) => {\n                    await this.renderItem(data);\n                },\n                fail: (data) => {\n                    Notification.exception(data);\n                }\n            }]);\n        });\n        await modal.show();\n    }\n\n    /**\n     * @param {Object} item\n     */\n    async renderItem(item) {\n        const existingItemIndex = this.#items.findIndex((i) => i.getItemId() === item.id);\n        const existingItem = this.#items[existingItemIndex] ?? false;\n        const oldElement = this.#element.querySelector('.sharing_cart_items .sharing_cart_item[data-itemid=\"' + item.id + '\"]');\n        if (existingItem && oldElement) {\n            const element = await this.#baseFactory.moodle().template().createElementFromFragment(\n                'block_sharing_cart',\n                'item',\n                1,\n                {\n                    item_id: item.id,\n                }\n            );\n\n            this.#element.querySelector('.sharing_cart_items').replaceChild(element, oldElement);\n            this.#items[existingItemIndex] = this.#baseFactory.block().item().element(this, element);\n\n            element.querySelectorAll('.sharing_cart_item').forEach((subItem) => {\n                this.setupItem(subItem);\n            });\n\n            return;\n        }\n\n        const element = await this.#baseFactory.moodle().template().createElementFromTemplate(\n            'block_sharing_cart/block/item',\n            {\n                id: item.id,\n                name: item.name,\n                type: item.type,\n                status: 0,\n                status_awaiting: true,\n                has_run_now: true,\n                task_id: item.task_id ?? null,\n                status_finished: false,\n                status_failed: false,\n                is_module: item.type !== 'section',\n                is_section: item.type === 'section',\n                is_root: true,\n            }\n        );\n        this.#element.querySelector('.sharing_cart_items').prepend(element);\n\n        this.setupItem(element);\n    }\n\n    /**\n     * @param {ItemElement} item\n     * @param {Number} sectionId\n     * @param {HTMLElement} modal\n     */\n    importItem(item, sectionId, modal) {\n        this.#course.clearClipboard();\n\n        const courseModuleIds = [];\n        modal.querySelectorAll('input[type=\"checkbox\"][data-type=\"coursemodule\"]:checked').forEach((checkbox) => {\n            courseModuleIds.push(checkbox.dataset.id);\n        });\n\n        if (item.isSection() && courseModuleIds.length === 0) {\n            modal.querySelectorAll('.form-check-input').forEach(async (item) => {\n                item.setCustomValidity(\n                    await get_string('atleast_one_course_module_must_be_included', 'block_sharing_cart')\n                );\n                item.reportValidity();\n            });\n            return false;\n        }\n\n        Ajax.call([{\n            methodname: 'block_sharing_cart_restore_item_from_sharing_cart_into_section',\n            args: {\n                item_id: item.getItemId(),\n                section_id: sectionId,\n                course_modules_to_include: courseModuleIds,\n            },\n            done: async (success) => {\n                if (success) {\n                    await this.#queue.loadQueue(true);\n                }\n            },\n            fail: (data) => {\n                Notification.exception(data);\n            }\n        }]);\n    }\n\n    /**\n     * @param {ItemElement} item\n     * @param {Number} sectionId\n     * @param {Event} e\n     */\n    async confirmImportBackupFromSharingCart(item, sectionId, e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const strings = await get_strings([\n            {\n                key: 'copy_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'into_section',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'import',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const sectionName = this.#course.getSectionName(sectionId);\n\n        const {html, js} = await this.#baseFactory.moodle().template().renderFragment(\n            'block_sharing_cart',\n            'item_restore_form',\n            1,\n            {\n                item_id: item.getItemId()\n            }\n        );\n\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[0] + ': ' +\n                '\"' + item.getItemName().slice(0, 50).trim() + '\"' +\n                strings[1] + ': ' +\n                '\"' + sectionName.slice(0, 50).trim() + '\"',\n            body: html,\n            buttons: {\n                save: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n        modal.getRoot().on(ModalEvents.shown, () => this.#baseFactory.moodle().template().runTemplateJS(js));\n        modal.getRoot().on(ModalEvents.save, this.importItem.bind(this, item, sectionId, modal.getRoot()[0]));\n        await modal.show();\n    }\n}"],"names":["constructor","baseFactory","element","canBackupUserdata","canAnonymizeUserdata","addEventListeners","setupCourse","setupQueue","setupItems","setupDragAndDrop","course","document","querySelector","courseElement","_classPrivateFieldGet","block","this","addBackupToSharingCartButtons","queue","querySelectorAll","forEach","setupItem","Sortable","dataIdAttr","onUpdate","call","methodname","args","item_ids","toArray","fail","data","exception","dropZone","draggableCourseModules","draggableSections","courseModule","courseModuleId","Number","parseInt","dataset","id","addEventListener","classList","add","remove","section","draggable","e","preventDefault","stopPropagation","async","addSectionBackupToSharingCart","addCourseModuleBackupToSharingCart","itemElement","item","push","setClipboard","clearClipboard","deleteItem","item_id","getItemId","done","deleted","getItemChildrenRecursively","childItem","index","findIndex","i","itemid","_classPrivateFieldGet3","splice","_classPrivateFieldGet4","length","innerHTML","Notification","alert","itemName","onSave","strings","key","component","html","js","moodle","template","renderTemplate","show_user_data_backup","show_anonymize_user_data","modal","ModalFactory","create","type","types","SAVE_CANCEL","title","slice","trim","body","buttons","save","cancel","removeOnClose","getRoot","on","ModalEvents","shown","runTemplateJS","modalUserdataCheckbox","getElementById","modalAnonymizeCheckbox","users","checked","anonymize","sectionId","sectionName","getSectionName","createBackupItemToSharingCartModal","settings","section_id","renderItem","show","courseModuleName","getCourseModuleName","course_module_id","existingItemIndex","existingItem","oldElement","createElementFromFragment","replaceChild","subItem","createElementFromTemplate","name","status","status_awaiting","has_run_now","task_id","status_finished","status_failed","is_module","is_section","is_root","prepend","importItem","courseModuleIds","checkbox","isSection","setCustomValidity","reportValidity","course_modules_to_include","success","loadQueue","renderFragment","getItemName","bind"],"mappings":"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"}