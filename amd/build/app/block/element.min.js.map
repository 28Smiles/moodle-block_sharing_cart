{"version":3,"file":"element.min.js","sources":["../../../src/app/block/element.js"],"sourcesContent":["import Sortable from '../../lib/sortablejs';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string, get_strings} from \"core/str\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\nexport default class BlockElement {\n    /**\n     * @type {BaseFactory}\n     */\n    #baseFactory;\n\n    /**\n     * @type {HTMLElement}\n     */\n    #element;\n\n    /**\n     * @type {CourseElement}\n     */\n    #course;\n\n    /**\n     * @type {QueueElement}\n     */\n    #queue;\n\n    /**\n     * @type {ItemElement[]}\n     */\n    #items = [];\n\n    /**\n     * @type {Sortable|NULL}\n     */\n    #sortable = null;\n\n    /**\n     * @type {ItemElement|NULL}\n     */\n    #clipboardItem = null;\n\n    /**\n     * @type {Boolean}\n     */\n    #canBackupUserdata = false;\n\n    /**\n     * @type {Boolean}\n     */\n    #canAnonymizeUserdata = false;\n\n    /**\n     * @type {Boolean}\n     */\n    #showSharingCartBasket = false;\n\n    /**\n     * @type {Number|null}\n     */\n    #draggedCourseModuleId = null;\n\n    /**\n     * @type {Number|null}\n     */\n    #draggedSectionId = null;\n\n    /**\n     * @param {BaseFactory} baseFactory\n     * @param {HTMLElement} element\n     * @param {Boolean} canBackupUserdata\n     * @param {Boolean} canAnonymizeUserdata\n     * @param {Boolean} showSharingCartBasket\n     */\n    constructor(baseFactory, element, canBackupUserdata, canAnonymizeUserdata, showSharingCartBasket) {\n        this.#baseFactory = baseFactory;\n        this.#element = element;\n        this.#canBackupUserdata = canBackupUserdata;\n        this.#canAnonymizeUserdata = canAnonymizeUserdata;\n        this.#showSharingCartBasket = showSharingCartBasket;\n    }\n\n    addEventListeners() {\n        this.setupCourse();\n        this.setupQueue();\n        this.setupItems();\n        this.setupDragAndDrop();\n        this.setupBulkDelete();\n    }\n\n    setupCourse() {\n        const course = document.querySelector('.course-content');\n\n        const courseElement = this.#baseFactory.block().course().element(this, course);\n\n        if (this.#showSharingCartBasket) {\n            courseElement.addBackupToSharingCartButtons();\n        }\n\n        this.#course = courseElement;\n    }\n\n    setupQueue() {\n        const queue = document.querySelector('.sharing_cart_queue');\n\n        this.#queue = this.#baseFactory.block().queue().element(this, queue);\n    }\n\n    setupItems() {\n        const items = this.#element.querySelectorAll('.sharing_cart_item');\n\n        items.forEach((element) => {\n            this.setupItem(element);\n        });\n\n        this.#sortable = new Sortable(this.#element.querySelector('.sharing_cart_items'), {\n            dataIdAttr: 'data-itemid',\n            onUpdate: () => {\n                Ajax.call([{\n                    methodname: 'block_sharing_cart_reorder_sharing_cart_items',\n                    args: {\n                        item_ids: this.#sortable.toArray(),\n                    },\n                    fail: (data) => {\n                        Notification.exception(data);\n                    }\n                }]);\n            }\n        });\n    }\n\n    setupDragAndDrop() {\n        const dropZone = this.#element;\n        const draggableCourseModules = document.querySelectorAll('.course-content .activity[data-for=\"cmitem\"][data-id]');\n        const draggableSections = document.querySelectorAll('.course-content .section[data-for=\"section\"][data-id]');\n\n        draggableCourseModules.forEach((courseModule) => {\n            const courseModuleId = Number.parseInt(courseModule.dataset.id);\n            if (!courseModuleId) {\n                return;\n            }\n\n            courseModule.addEventListener('dragstart', () => {\n                this.#draggedCourseModuleId = courseModuleId;\n                dropZone.classList.add('dragging_item');\n            });\n            courseModule.addEventListener('dragend', () => {\n                this.#draggedCourseModuleId = null;\n                dropZone.classList.remove('dragging_item');\n            });\n        });\n        draggableSections.forEach((section) => {\n            const id = Number.parseInt(section.dataset.id);\n            if (!id) {\n                return;\n            }\n\n            const draggable = section.querySelector('.course-section-header');\n\n            draggable.addEventListener('dragstart', () => {\n                this.#draggedSectionId = id;\n                dropZone.classList.add('dragging_item');\n            });\n            draggable.addEventListener('dragend', () => {\n                this.#draggedSectionId = null;\n                dropZone.classList.remove('dragging_item');\n            });\n        });\n\n        dropZone.addEventListener('dragover', (e) => {\n            if (!this.#draggedSectionId && !this.#draggedCourseModuleId) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n        });\n        dropZone.addEventListener('dragleave', (e) => {\n            if (!this.#draggedSectionId && !this.#draggedCourseModuleId) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n        });\n        dropZone.addEventListener('drop', async (e) => {\n            if (!this.#draggedSectionId && !this.#draggedCourseModuleId) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (this.#draggedSectionId) {\n                await this.addSectionBackupToSharingCart(this.#draggedSectionId);\n            } else if (this.#draggedCourseModuleId) {\n                await this.addCourseModuleBackupToSharingCart(this.#draggedCourseModuleId);\n            }\n        });\n    }\n\n    setupBulkDelete() {\n        const enableBulkDeleteButton = this.#element.querySelector('#block_sharing_cart_bulk_delete');\n        const disableBulkDeleteButton = this.#element.querySelector('#block_sharing_cart_cancel_bulk_delete');\n        const bulkDeleteButton = this.#element.querySelector('#block_sharing_cart_bulk_delete_confirm');\n\n        const checkboxSelector = '.sharing_cart_item input[data-action=\"bulk_select\"][type=\"checkbox\"]';\n\n        enableBulkDeleteButton.addEventListener('click', () => {\n            enableBulkDeleteButton.classList.add('d-none');\n            disableBulkDeleteButton.classList.remove('d-none');\n            bulkDeleteButton.classList.remove('d-none');\n\n            this.#element.querySelectorAll(checkboxSelector).forEach((checkbox) => {\n                checkbox.classList.remove('d-none');\n                checkbox.checked = false;\n            });\n        });\n\n        disableBulkDeleteButton.addEventListener('click', () => {\n            disableBulkDeleteButton.classList.add('d-none');\n            bulkDeleteButton.classList.add('d-none');\n            bulkDeleteButton.disabled = true;\n            enableBulkDeleteButton.classList.remove('d-none');\n\n            this.#element.querySelectorAll(checkboxSelector).forEach((checkbox) => {\n                checkbox.classList.add('d-none');\n                checkbox.checked = false;\n            });\n        });\n\n        bulkDeleteButton.addEventListener('click', async () => {\n            if (bulkDeleteButton.disabled) {\n                return;\n            }\n\n            const itemIds = [];\n            this.#element.querySelectorAll(checkboxSelector + ':checked').forEach((checkbox) => {\n                itemIds.push(checkbox.value);\n            });\n\n            await this.confirmDeleteItems(itemIds);\n        });\n    }\n\n    /**\n     * @param {HTMLElement} element\n     */\n    setupItem(element) {\n        const itemElement = this.#baseFactory.block().item().element(this, element);\n\n        this.#element.querySelector('.no-items')?.remove();\n\n        this.#items.push(\n            itemElement\n        );\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async setClipboard(item) {\n        this.#clipboardItem = item;\n\n        await this.#course.setClipboard(item);\n    }\n\n    clearClipboard() {\n        this.#clipboardItem = null;\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async removeItemElement(item) {\n        const childItems = item.getItemChildrenRecursively();\n        childItems.forEach((childItem) => {\n            const index = this.#items.findIndex((i) => i.getItemId() === Number.parseInt(childItem.dataset.itemid));\n            if (index === -1) {\n                return;\n            }\n\n            if (this.#items[index].getItemId() === this.#clipboardItem?.getItemId()) {\n                this.#course.clearClipboard();\n            }\n\n            this.#items.splice(index, 1);\n            childItem.remove();\n        });\n\n        const index = this.#items.findIndex((i) => i.getItemId() === item.getItemId());\n        if (this.#items[index].getItemId() === this.#clipboardItem?.getItemId()) {\n            this.#course.clearClipboard();\n        }\n\n        this.#items.splice(index, 1);\n        item.remove();\n\n        if (this.#items.length === 0) {\n            this.#element.querySelector('.sharing_cart_items')\n                .innerHTML = await get_string('no_items', 'block_sharing_cart');\n        }\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    deleteItem(item) {\n        Ajax.call([{\n            methodname: 'block_sharing_cart_delete_item_from_sharing_cart',\n            args: {\n                item_id: item.getItemId(),\n            },\n            done: async (deleted) => {\n                if (deleted) {\n                    await this.removeItemElement(item);\n                } else {\n                    await Notification.alert('Failed to delete item');\n                }\n            },\n            fail: (data) => {\n                Notification.exception(data);\n            }\n        }]);\n    }\n\n    /**\n     * @param {Array<Number>} itemIds\n     */\n    deleteItems(itemIds) {\n        itemIds = itemIds.map((id) => Number.parseInt(id));\n\n        Ajax.call([{\n            methodname: 'block_sharing_cart_delete_items_from_sharing_cart',\n            args: {\n                item_ids: itemIds,\n            },\n            done: async (deletedItemIds) => {\n                const items = this.#items.filter((i) => itemIds.includes(i.getItemId()));\n                for (const item of items) {\n                    const deleted = deletedItemIds.includes(item.getItemId());\n                    if (!deleted) {\n                        Notification.alert('Failed to delete item: \"' + item.getItemName() + '\"');\n                        continue;\n                    }\n\n                    await this.removeItemElement(item);\n                }\n\n                document.getElementById('block_sharing_cart_bulk_delete_confirm').disabled = true;\n            },\n            fail: (data) => {\n                Notification.exception(data);\n            }\n        }]);\n    }\n\n    /**\n     * @param {String} itemName\n     * @param {CallableFunction} onSave\n     * @return {Promise<Modal>}\n     */\n    async createBackupItemToSharingCartModal(itemName, onSave) {\n        const strings = await get_strings([\n            {\n                key: 'backup_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'into_sharing_cart',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'backup',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const {html, js} = await this.#baseFactory.moodle().template().renderTemplate(\n            'block_sharing_cart/modal/backup_to_sharing_cart_modal_body',\n            {\n                show_user_data_backup: this.#canBackupUserdata,\n                show_anonymize_user_data: this.#canBackupUserdata && this.#canAnonymizeUserdata,\n            }\n        );\n\n        /**\n         * @type {Modal}\n         */\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[0] + ': \"' + itemName.slice(0, 50).trim() + '\" ' + strings[1],\n            body: html,\n            buttons: {\n                save: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n        modal.getRoot().on(ModalEvents.shown, () => this.#baseFactory.moodle().template().runTemplateJS(js));\n        modal.getRoot().on(ModalEvents.save, () => {\n            const modalUserdataCheckbox = document.getElementById('modal-userdata-checkbox');\n            const modalAnonymizeCheckbox = document.getElementById('modal-anonymize-checkbox');\n\n            onSave({\n                users: modalUserdataCheckbox.checked ?? false,\n                anonymize: modalAnonymizeCheckbox.checked ?? false\n            });\n        });\n\n        return modal;\n    }\n\n    /**\n     * @param {Number} sectionId\n     */\n    async addSectionBackupToSharingCart(sectionId) {\n        const sectionName = this.#course.getSectionName(sectionId);\n\n        const cms = this.#course.getSectionCourseModules(sectionId);\n\n        if (cms.length === 0) {\n            const strings = await get_strings([\n                {\n                    key: 'no_course_modules_in_section',\n                    component: 'block_sharing_cart',\n                },\n                {\n                    key: 'no_course_modules_in_section_description',\n                    component: 'block_sharing_cart',\n                },\n            ]);\n\n            await Notification.alert(strings[0], strings[1]);\n\n            return;\n        }\n\n        const modal = await this.createBackupItemToSharingCartModal(sectionName, (settings) => {\n            Ajax.call([{\n                methodname: 'block_sharing_cart_backup_section_into_sharing_cart',\n                args: {\n                    section_id: sectionId,\n                    settings: settings\n                },\n                done: async (data) => {\n                    await this.renderItem(data);\n                },\n                fail: (data) => {\n                    Notification.exception(data);\n                }\n            }]);\n        });\n\n        await modal.show();\n    }\n\n    /**\n     * @param {Number} courseModuleId\n     */\n    async addCourseModuleBackupToSharingCart(courseModuleId) {\n        const courseModuleName = this.#course.getCourseModuleName(courseModuleId);\n\n        const modal = await this.createBackupItemToSharingCartModal(courseModuleName, (settings) => {\n            Ajax.call([{\n                methodname: 'block_sharing_cart_backup_course_module_into_sharing_cart',\n                args: {\n                    course_module_id: courseModuleId,\n                    settings: settings\n                },\n                done: async (data) => {\n                    await this.renderItem(data);\n                },\n                fail: (data) => {\n                    Notification.exception(data);\n                }\n            }]);\n        });\n        await modal.show();\n    }\n\n    /**\n     * @param {Object} item\n     */\n    async renderItem(item) {\n        const existingItemIndex = this.#items.findIndex((i) => i.getItemId() === item.id);\n        const existingItem = this.#items[existingItemIndex] ?? false;\n        const oldElement = this.#element.querySelector('.sharing_cart_items .sharing_cart_item[data-itemid=\"' + item.id + '\"]');\n        if (existingItem && oldElement) {\n            const element = await this.#baseFactory.moodle().template().createElementFromFragment(\n                'block_sharing_cart',\n                'item',\n                1,\n                {\n                    item_id: item.id,\n                }\n            );\n\n            this.#element.querySelector('.sharing_cart_items').replaceChild(element, oldElement);\n            this.#items[existingItemIndex] = this.#baseFactory.block().item().element(this, element);\n\n            element.querySelectorAll('.sharing_cart_item').forEach((subItem) => {\n                this.setupItem(subItem);\n            });\n\n            return;\n        }\n\n        const element = await this.#baseFactory.moodle().template().createElementFromTemplate(\n            'block_sharing_cart/block/item',\n            {\n                id: item.id,\n                name: item.name,\n                type: item.type,\n                status: 0,\n                status_awaiting: true,\n                has_run_now: true,\n                task_id: item.task_id ?? null,\n                status_finished: false,\n                status_failed: false,\n                is_module: item.type !== 'section',\n                is_section: item.type === 'section',\n                is_root: true,\n            }\n        );\n        this.#element.querySelector('.sharing_cart_items').prepend(element);\n\n        this.setupItem(element);\n    }\n\n    /**\n     * @param {ItemElement} item\n     * @param {Number} sectionId\n     * @param {HTMLElement} modal\n     */\n    importItem(item, sectionId, modal) {\n        this.#course.clearClipboard();\n\n        const courseModuleIds = [];\n        modal.querySelectorAll('input[type=\"checkbox\"][data-type=\"coursemodule\"]:checked').forEach((checkbox) => {\n            courseModuleIds.push(checkbox.dataset.id);\n        });\n\n        if (item.isSection() && courseModuleIds.length === 0) {\n            modal.querySelectorAll('.form-check-input').forEach(async (item) => {\n                item.setCustomValidity(\n                    await get_string('atleast_one_course_module_must_be_included', 'block_sharing_cart')\n                );\n                item.reportValidity();\n            });\n            return false;\n        }\n\n        Ajax.call([{\n            methodname: 'block_sharing_cart_restore_item_from_sharing_cart_into_section',\n            args: {\n                item_id: item.getItemId(),\n                section_id: sectionId,\n                course_modules_to_include: courseModuleIds,\n            },\n            done: async (success) => {\n                if (success) {\n                    await this.#queue.loadQueue(true);\n                }\n            },\n            fail: (data) => {\n                Notification.exception(data);\n            }\n        }]);\n    }\n\n    /**\n     * @param {ItemElement} item\n     * @param {Number} sectionId\n     * @param {Event} e\n     */\n    async confirmImportBackupFromSharingCart(item, sectionId, e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const strings = await get_strings([\n            {\n                key: 'copy_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'into_section',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'import',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const sectionName = this.#course.getSectionName(sectionId);\n\n        const {html, js} = await this.#baseFactory.moodle().template().renderFragment(\n            'block_sharing_cart',\n            'item_restore_form',\n            1,\n            {\n                item_id: item.getItemId()\n            }\n        );\n\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[0] + ': ' +\n                '\"' + item.getItemName().slice(0, 50).trim() + '\"' +\n                strings[1] + ': ' +\n                '\"' + sectionName.slice(0, 50).trim() + '\"',\n            body: html,\n            buttons: {\n                save: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n        modal.getRoot().on(ModalEvents.shown, () => this.#baseFactory.moodle().template().runTemplateJS(js));\n        modal.getRoot().on(ModalEvents.save, this.importItem.bind(this, item, sectionId, modal.getRoot()[0]));\n        await modal.show();\n    }\n\n    /**\n     * @param {Array<Number>} itemIds\n     */\n    async confirmDeleteItems(itemIds) {\n        const strings = await get_strings([\n            {\n                key: 'delete_items',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'confirm_delete_items',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'delete',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.DELETE_CANCEL,\n            title: strings[0],\n            body: strings[1],\n            buttons: {\n                delete: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n\n        modal.getRoot().on(ModalEvents.delete, this.deleteItems.bind(this, itemIds));\n        await modal.show();\n    }\n}"],"names":["constructor","baseFactory","element","canBackupUserdata","canAnonymizeUserdata","showSharingCartBasket","addEventListeners","setupCourse","setupQueue","setupItems","setupDragAndDrop","setupBulkDelete","course","document","querySelector","courseElement","_classPrivateFieldGet","block","this","addBackupToSharingCartButtons","queue","querySelectorAll","forEach","setupItem","Sortable","dataIdAttr","onUpdate","call","methodname","args","item_ids","toArray","fail","data","exception","dropZone","draggableCourseModules","draggableSections","courseModule","courseModuleId","Number","parseInt","dataset","id","addEventListener","classList","add","remove","section","draggable","e","preventDefault","stopPropagation","async","addSectionBackupToSharingCart","addCourseModuleBackupToSharingCart","enableBulkDeleteButton","disableBulkDeleteButton","bulkDeleteButton","checkboxSelector","checkbox","checked","disabled","itemIds","push","value","confirmDeleteItems","itemElement","item","setClipboard","clearClipboard","getItemChildrenRecursively","childItem","index","findIndex","i","getItemId","itemid","_classPrivateFieldGet3","splice","_classPrivateFieldGet4","length","innerHTML","deleteItem","item_id","done","deleted","removeItemElement","Notification","alert","deleteItems","map","items","filter","includes","deletedItemIds","getItemName","getElementById","itemName","onSave","strings","key","component","html","js","moodle","template","renderTemplate","show_user_data_backup","show_anonymize_user_data","modal","ModalFactory","create","type","types","SAVE_CANCEL","title","slice","trim","body","buttons","save","cancel","removeOnClose","getRoot","on","ModalEvents","shown","runTemplateJS","modalUserdataCheckbox","modalAnonymizeCheckbox","users","anonymize","sectionId","sectionName","getSectionName","getSectionCourseModules","createBackupItemToSharingCartModal","settings","section_id","renderItem","show","courseModuleName","getCourseModuleName","course_module_id","existingItemIndex","existingItem","oldElement","createElementFromFragment","replaceChild","subItem","createElementFromTemplate","name","status","status_awaiting","has_run_now","task_id","status_finished","status_failed","is_module","is_section","is_root","prepend","importItem","courseModuleIds","isSection","setCustomValidity","reportValidity","course_modules_to_include","success","loadQueue","renderFragment","bind","DELETE_CANCEL","delete"],"mappings":"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"}