{"version":3,"file":"element.min.js","sources":["../../../src/app/block/element.js"],"sourcesContent":["// eslint-disable-next-line no-unused-vars\nimport BaseFactory from '../factory';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_strings} from \"core/str\";\nimport Ajax from \"core/ajax\";\n\nexport default class BlockElement {\n    /**\n     * @type {BaseFactory}\n     */\n    #baseFactory;\n\n    /**\n     * @type {HTMLElement}\n     */\n    #element;\n\n    /**\n     * @type {CourseElement}\n     */\n    #course;\n\n    /**\n     * @type {ItemElement[]}\n     */\n    #items = [];\n\n    /**\n     * @type {ItemElement|NULL}\n     */\n    #clipboardItem = null;\n\n    #canBackupUserdata = false;\n    #canAnonymizeUserdata = false;\n\n    constructor(baseFactory, element, canBackupUserdata, canAnonymizeUserdata) {\n        this.#baseFactory = baseFactory;\n        this.#element = element;\n        this.#canBackupUserdata = canBackupUserdata;\n        this.#canAnonymizeUserdata = canAnonymizeUserdata;\n    }\n\n    addEventListeners() {\n        this.setupCourse();\n        this.setupItems();\n    }\n\n    setupCourse() {\n        const course = document.querySelector('.course-content');\n\n        const courseElement = this.#baseFactory.block().course().element(this, course);\n        courseElement.addBackupToSharingCartButtons();\n\n        this.#course = courseElement;\n    }\n\n    setupItems() {\n        const items = this.#element.querySelectorAll('.sharing_cart_item');\n\n        items.forEach((element) => {\n            this.setupItem(element);\n        });\n    }\n\n    /**\n     * @param {HTMLElement} element\n     */\n    setupItem(element) {\n        const itemElement = this.#baseFactory.block().item().element(this, element);\n\n        this.#items.push(\n            itemElement\n        );\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async setClipboard(item) {\n        this.#clipboardItem = item;\n\n        await this.#course.setClipboard(item);\n    }\n\n    clearClipboard() {\n        this.#clipboardItem = null;\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    deleteItem(item) {\n        Ajax.call([{\n            methodname: 'block_sharing_cart_delete_item_from_sharing_cart',\n            args: {\n                item_id: item.getItemId(),\n            },\n            done: async (deleted) => {\n                if (deleted) {\n                    const index = this.#items.findIndex((i) => i.getItemId() === item.getItemId());\n                    this.#items.splice(index, 1);\n                    item.remove();\n                } else {\n                    console.error('Failed to delete item');\n                }\n            },\n            fail: (data) => {\n                console.error(data);\n            }\n        }]);\n    }\n\n    /**\n     * @param {String} itemName\n     * @param {CallableFunction} onSave\n     * @return {Promise<Modal>}\n     */\n    async createBackupItemToSharingCartModal(itemName, onSave) {\n        const strings = await get_strings([\n            {\n                key: 'backup_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'into_sharing_cart',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'backup',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const {html, js} = await this.#baseFactory.moodle().template().renderTemplate(\n            'block_sharing_cart/modal/backup_to_sharing_cart_modal_body',\n            {\n                show_user_data_backup: this.#canBackupUserdata,\n                show_anonymize_user_data: this.#canBackupUserdata && this.#canAnonymizeUserdata,\n            }\n        );\n\n        /**\n         * @type {Modal}\n         */\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[0] + ': \"' + itemName.slice(0, 50).trim() + '\" ' + strings[1],\n            body: html,\n            buttons: {\n                save: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n        modal.getRoot().on(ModalEvents.shown, () => this.#baseFactory.moodle().template().runTemplateJS(js));\n        modal.getRoot().on(ModalEvents.save, () => {\n            const modalUserdataCheckbox = document.getElementById('modal-userdata-checkbox');\n            const modalAnonymizeCheckbox = document.getElementById('modal-anonymize-checkbox');\n\n            onSave({\n                users: modalUserdataCheckbox.checked ?? false,\n                anonymize: modalAnonymizeCheckbox.checked ?? false\n            });\n        });\n\n        return modal;\n    }\n\n    /**\n     * @param {Number} sectionId\n     */\n    async addSectionBackupToSharingCart(sectionId) {\n        const sectionName = this.#course.getSectionName(sectionId);\n\n        const modal = await this.createBackupItemToSharingCartModal(sectionName, (settings) => {\n            Ajax.call([{\n                methodname: 'block_sharing_cart_backup_section_into_sharing_cart',\n                args: {\n                    section_id: sectionId,\n                    settings: settings\n                },\n                done: async (data) => {\n                    await this.renderItem(data);\n                },\n                fail: (data) => {\n                    console.error(data);\n                }\n            }]);\n        });\n\n        await modal.show();\n    }\n\n    /**\n     * @param {Number} courseModuleId\n     */\n    async addCourseModuleBackupToSharingCart(courseModuleId) {\n        const courseModuleName = this.#course.getCourseModuleName(courseModuleId);\n\n        const modal = await this.createBackupItemToSharingCartModal(courseModuleName, (settings) => {\n            Ajax.call([{\n                methodname: 'block_sharing_cart_backup_course_module_into_sharing_cart',\n                args: {\n                    course_module_id: courseModuleId,\n                    settings: settings\n                },\n                done: async (data) => {\n                    await this.renderItem(data);\n                },\n                fail: (data) => {\n                    console.error(data);\n                }\n            }]);\n        });\n        await modal.show();\n    }\n\n    /**\n     * @param {Object} item\n     */\n    async renderItem(item) {\n        const existingItemIndex = this.#items.findIndex((i) => i.getItemId() === item.id);\n        const existingItem = this.#items[existingItemIndex] ?? false;\n        const oldElement = this.#element.querySelector('.sharing_cart_items .sharing_cart_item[data-itemid=\"' + item.id + '\"]');\n        if (existingItem && oldElement) {\n            const element = await this.#baseFactory.moodle().template().createElementFromFragment(\n                'block_sharing_cart',\n                'item',\n                1,\n                {\n                    item_id: item.id,\n                }\n            );\n\n            this.#element.querySelector('.sharing_cart_items').replaceChild(element, oldElement);\n            this.#items[existingItemIndex] = this.#baseFactory.block().item().element(this, element);\n\n            element.querySelectorAll('.sharing_cart_item').forEach((subItem) => {\n                this.setupItem(subItem);\n            });\n\n            return;\n        }\n\n        const element = await this.#baseFactory.moodle().template().createElementFromTemplate(\n            'block_sharing_cart/block/item',\n            {\n                id: item.id,\n                name: item.name,\n                type: item.type,\n                status: 0,\n                status_awaiting: true,\n                status_finished: false,\n                status_failed: false,\n                is_module: item.type !== 'section' && item.type !== 'course',\n                is_course: item.type === 'course',\n                is_section: item.type === 'section',\n                is_root: true,\n            }\n        );\n        this.#element.querySelector('.sharing_cart_items').append(element);\n\n        this.setupItem(element);\n    }\n\n    /**\n     * @param {ItemElement} item\n     * @param {Number} sectionId\n     */\n    importItem(item, sectionId) {\n        // TODO: Do web service call to delete item\n\n        console.log('Importing item (id: ' + item.getItemId() + ') from sharing cart to section (id: ' + sectionId + ')');\n        this.#course.clearClipboard();\n    }\n\n    /**\n     * @param {ItemElement} item\n     * @param {Number} sectionId\n     * @param {Event} e\n     */\n    async confirmImportBackupFromSharingCart(item, sectionId, e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const strings = await get_strings([\n            {\n                key: 'copy_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'into_section',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'confirm_copy_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'import',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const sectionName = this.#course.getSectionName(sectionId);\n\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[0] + ': ' +\n                '\"' + item.getItemName().slice(0, 50).trim() + '\"' +\n                strings[1] + ': ' +\n                '\"' + sectionName.slice(0, 50).trim() + '\"',\n            body: strings[2],\n            buttons: {\n                save: strings[3],\n                cancel: strings[4],\n            },\n            removeOnClose: true,\n        });\n        modal.getRoot().on(ModalEvents.save, this.importItem.bind(this, item, sectionId));\n        await modal.show();\n    }\n}"],"names":["constructor","baseFactory","element","canBackupUserdata","canAnonymizeUserdata","addEventListeners","setupCourse","setupItems","course","document","querySelector","courseElement","_classPrivateFieldGet","block","this","addBackupToSharingCartButtons","querySelectorAll","forEach","setupItem","itemElement","item","push","setClipboard","clearClipboard","deleteItem","call","methodname","args","item_id","getItemId","done","async","deleted","index","findIndex","i","splice","remove","console","error","fail","data","itemName","onSave","strings","key","component","html","js","moodle","template","renderTemplate","show_user_data_backup","show_anonymize_user_data","modal","ModalFactory","create","type","types","SAVE_CANCEL","title","slice","trim","body","buttons","save","cancel","removeOnClose","getRoot","on","ModalEvents","shown","runTemplateJS","modalUserdataCheckbox","getElementById","modalAnonymizeCheckbox","users","checked","anonymize","sectionId","sectionName","getSectionName","createBackupItemToSharingCartModal","settings","section_id","renderItem","show","courseModuleId","courseModuleName","getCourseModuleName","course_module_id","existingItemIndex","id","existingItem","oldElement","createElementFromFragment","replaceChild","subItem","createElementFromTemplate","name","status","status_awaiting","status_finished","status_failed","is_module","is_course","is_section","is_root","append","importItem","log","e","preventDefault","stopPropagation","getItemName","bind"],"mappings":"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"}