{"version":3,"file":"element.min.js","sources":["../../../../src/app/block/queue/element.js"],"sourcesContent":["import {getCurrentCourseEditor} from \"core_courseformat/courseeditor\";\nimport Ajax from \"core/ajax\";\nimport * as Toast from 'core/toast';\nimport {get_string as getString} from \"core/str\";\n\nexport default class QueueElement {\n    /**\n     * @type {BaseFactory}\n     */\n    #baseFactory;\n\n    /**\n     * @type {BlockElement}\n     */\n    #blockElement;\n\n    /**\n     * @type {HTMLElement}\n     */\n    #element;\n\n    /**\n     * @type {CourseEditor}\n     */\n    #reactive;\n\n    /**\n     *\n     * @param {BaseFactory} baseFactory\n     * @param {BlockElement} blockElement\n     * @param {HTMLElement} element\n     */\n    constructor(baseFactory, blockElement, element) {\n        this.#baseFactory = baseFactory;\n        this.#blockElement = blockElement;\n        this.#element = element;\n        this.#reactive = getCurrentCourseEditor();\n\n        this.loadQueue();\n\n        setInterval(() => {\n            if (this.getQueueItems().length === 0) {\n                return;\n            }\n\n            this.loadQueue();\n        }, 4000);\n    }\n\n    /**\n     * @return {NodeListOf<Element>}\n     */\n    getQueueItems() {\n        return this.#element.querySelectorAll('.queue-item');\n    }\n\n    async loadQueue(showSpinner = false) {\n        const oldChildren = this.#element.children;\n        const oldQueueItemsCount = this.getQueueItems().length;\n\n        if (showSpinner) {\n            this.#element.innerHTML = '<i class=\"fa fa-spinner\"></i>';\n        }\n\n        const elements = await this.#baseFactory.moodle().template().createElementsFromFragment(\n            'block_sharing_cart',\n            'item_queue',\n            M.cfg.contextid,\n            {}\n        );\n\n        const queueItems = elements.filter((element) => {\n            if (!(element instanceof Element)) {\n                return false;\n            }\n\n            return element.classList.contains('queue-item');\n        });\n\n        if (oldQueueItemsCount > queueItems.length) {\n            const removedElements = Array.from(oldChildren).filter((element) => {\n                const correspondingElement = queueItems.find((el) => el.dataset.id === element.dataset.id);\n\n                return correspondingElement === undefined;\n            });\n\n            const sectionIds = [];\n            removedElements.forEach((element) => {\n                const sectionId = element.dataset.toSectionId;\n\n                if (!sectionId) {\n                    return;\n                }\n\n                if (sectionIds.indexOf(sectionId) !== -1) {\n                    return;\n                }\n\n                sectionIds.push(sectionId);\n            });\n\n            if (sectionIds.length > 0) {\n                this.#reactive.dispatch('sectionState', sectionIds).then(() => {\n                    Toast.add(getString('you_may_need_to_reload_the_course_warning', 'block_sharing_cart'), {\n                        closeButton: true,\n                        autohide: false,\n                        type: 'warning'\n                    });\n                });\n            }\n        }\n\n        this.#element.innerHTML = '';\n\n        queueItems.forEach((element) => {\n            const runNowButton = element.querySelector('button.btn');\n\n            if (!runNowButton) {\n                return;\n            }\n\n            runNowButton.addEventListener('click', () => {\n                const taskId = element.dataset.id;\n\n                runNowButton.disabled = true;\n\n                Ajax.call([{\n                    methodname: 'block_sharing_cart_run_task_now',\n                    args: {\n                        task_id: taskId\n                    }\n                }]);\n\n                this.loadQueue();\n            }, {once: true});\n        });\n\n        elements.forEach((element) => {\n            this.#element.appendChild(element);\n        });\n    }\n}\n"],"names":["constructor","baseFactory","blockElement","element","loadQueue","setInterval","this","getQueueItems","length","_classPrivateFieldGet","querySelectorAll","showSpinner","oldChildren","children","oldQueueItemsCount","innerHTML","elements","moodle","template","createElementsFromFragment","M","cfg","contextid","queueItems","filter","Element","classList","contains","removedElements","Array","from","undefined","find","el","dataset","id","sectionIds","forEach","sectionId","toSectionId","indexOf","push","dispatch","then","Toast","add","closeButton","autohide","type","runNowButton","querySelector","addEventListener","taskId","disabled","call","methodname","args","task_id","once","appendChild"],"mappings":"i4EAgCIA,YAAYC,YAAaC,aAAcC,+UACfF,sDACCC,kDACLC,+CACC,gDAEZC,YAELC,aAAY,KAC4B,IAAhCC,KAAKC,gBAAgBC,aAIpBJ,cACN,KAMPG,uBACWE,qCAAcC,iBAAiB,qCAG1BC,0EACNC,YAAcH,qCAAcI,SAC5BC,mBAAqBR,KAAKC,gBAAgBC,OAE5CG,mDACcI,UAAY,uCAGxBC,eAAiBP,yCAAkBQ,SAASC,WAAWC,2BACzD,qBACA,aACAC,EAAEC,IAAIC,UACN,IAGEC,WAAaP,SAASQ,QAAQrB,SAC1BA,mBAAmBsB,SAIlBtB,QAAQuB,UAAUC,SAAS,mBAGlCb,mBAAqBS,WAAWf,OAAQ,OAClCoB,gBAAkBC,MAAMC,KAAKlB,aAAaY,QAAQrB,cAGpB4B,IAFHR,WAAWS,MAAMC,IAAOA,GAAGC,QAAQC,KAAOhC,QAAQ+B,QAAQC,OAKrFC,WAAa,GACnBR,gBAAgBS,SAASlC,gBACfmC,UAAYnC,QAAQ+B,QAAQK,YAE7BD,YAIkC,IAAnCF,WAAWI,QAAQF,YAIvBF,WAAWK,KAAKH,cAGhBF,WAAW5B,OAAS,yCACLkC,SAAS,eAAgBN,YAAYO,MAAK,KACrDC,MAAMC,KAAI,mBAAU,4CAA6C,sBAAuB,CACpFC,aAAa,EACbC,UAAU,EACVC,KAAM,oDAMRjC,UAAY,GAE1BQ,WAAWc,SAASlC,gBACV8C,aAAe9C,QAAQ+C,cAAc,cAEtCD,cAILA,aAAaE,iBAAiB,SAAS,WAC7BC,OAASjD,QAAQ+B,QAAQC,GAE/Bc,aAAaI,UAAW,gBAEnBC,KAAK,CAAC,CACPC,WAAY,kCACZC,KAAM,CACFC,QAASL,gBAIZhD,cACN,CAACsD,MAAM,OAGd1C,SAASqB,SAASlC,+CACAwD,YAAYxD"}