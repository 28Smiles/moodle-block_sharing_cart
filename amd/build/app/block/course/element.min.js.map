{"version":3,"file":"element.min.js","sources":["../../../../src/app/block/course/element.js"],"sourcesContent":["// eslint-disable-next-line no-unused-vars\nimport BaseFactory from '../factory';\nimport Templates from \"core/templates\";\n\nexport default class CourseElement {\n    /**\n     * @type {BaseFactory}\n     */\n    #baseFactory;\n\n    /**\n     * @type {BlockElement}\n     */\n    #blockElement;\n\n    /**\n     * @type {HTMLElement}\n     */\n    #element;\n\n    /**\n     * @type {HTMLElement|null}\n     */\n    #clipboard = null;\n\n    /**\n     * @type {AbortController}\n     */\n    #clipboardTargetListenerAbortController = new AbortController();\n\n    constructor(baseFactory, blockElement, element) {\n        this.#baseFactory = baseFactory;\n        this.#blockElement = blockElement;\n        this.#element = element;\n    }\n\n    async addBackupToSharingCartButtons() {\n        let element = document.createElement('div');\n        const {html, js} = await new Promise((resolve, reject) => {\n            Templates.render('block_sharing_cart/block/course/add_to_sharing_cart_button', {})\n                .then(async (html, js) => {\n                    resolve({\n                        html,\n                        js\n                    });\n                }).fail(reject);\n        });\n        element = await Templates.replaceNode(\n            element,\n            html,\n            js\n        )[0];\n\n        const sectionTitles = this.#element.querySelectorAll('.course-section-header .inplaceeditable');\n        sectionTitles.forEach((sectionTitle) => {\n            const button = element.cloneNode(true);\n\n            sectionTitle.after(button);\n\n            const sectionId = sectionTitle.dataset.itemid;\n\n            button.addEventListener(\n                'click',\n                this.#blockElement.addSectionBackupToSharingCart.bind(this.#blockElement, sectionId)\n            );\n        });\n\n        const courseModuleActionMenus = this.#element.querySelectorAll('.cm_action_menu');\n        courseModuleActionMenus.forEach((courseModuleActionMenu) => {\n            const button = element.cloneNode(true);\n\n            courseModuleActionMenu.append(button);\n\n            const courseModuleId = courseModuleActionMenu.dataset.cmid;\n\n            button.addEventListener(\n                'click',\n                this.#blockElement.addCourseModuleBackupToSharingCart.bind(this.#blockElement, courseModuleId)\n            );\n        });\n    }\n\n    async renderClipboard() {\n        this.#clipboard = document.createElement('div');\n\n        const {html, js} = await new Promise((resolve, reject) => {\n            Templates.render('block_sharing_cart/block/course/clipboard', {})\n                .then(async (html, js) => {\n                    resolve({\n                        html,\n                        js\n                    });\n                }).fail(reject);\n        });\n        this.#clipboard = await Templates.replaceNode(\n            this.#clipboard,\n            html,\n            js\n        )[0];\n\n        this.#element.prepend(this.#clipboard);\n\n        const clearClipboardButton = this.#clipboard.querySelector('[data-action=\"clear-clipboard\"]');\n        clearClipboardButton.addEventListener(\n            'click',\n            this.onClearClipboard.bind(this)\n        );\n    }\n\n    /**\n     * @param {Event} e\n     */\n    onClearClipboard(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.clearClipboard();\n    }\n\n    clearClipboard() {\n        this.#clipboard.classList.add('d-none');\n        this.clearClipboardTargets();\n\n        this.#blockElement.clearClipboard();\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    updateClipboard(item) {\n        this.#clipboard.classList.add('d-none');\n\n        const clipboardItemInfo = this.#clipboard.querySelector('.info');\n        clipboardItemInfo.innerHTML = item.getItemInfo().innerHTML;\n\n        this.#clipboard.classList.remove('d-none');\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async updateClipboardTargets(item) {\n        let element = document.createElement('div');\n        const {html, js} = await new Promise((resolve, reject) => {\n            Templates.render('block_sharing_cart/block/course/clipboard_target', {})\n                .then(async (html, js) => {\n                    resolve({\n                        html,\n                        js\n                    });\n                }).fail(reject);\n        });\n        element = await Templates.replaceNode(\n            element,\n            html,\n            js\n        )[0];\n\n        this.#clipboardTargetListenerAbortController.abort();\n        this.#clipboardTargetListenerAbortController = new AbortController();\n\n        this.#element.querySelectorAll('[data-for=\"cmlist\"]').forEach((section) => {\n            const clipboardTarget = section.querySelector('.clipboard_target') ?? element.cloneNode(true);\n\n            section.prepend(clipboardTarget);\n\n            const sectionId = section.closest('[data-for=\"section\"]').dataset.id;\n\n            clipboardTarget.addEventListener(\n                'click',\n                this.#blockElement.confirmImportBackupFromSharingCart.bind(this.#blockElement, item, sectionId),\n                {\n                    signal: this.#clipboardTargetListenerAbortController.signal\n                }\n            );\n        });\n    }\n\n    /**\n     * @param {Number} sectionId\n     */\n    getSectionName(sectionId) {\n        return this.#element.querySelector(`[data-for=\"section\"][data-id=\"${sectionId}\"] .sectionname`).innerText.trim();\n    }\n\n    getClipboardTargets() {\n        return this.#element.querySelectorAll('.clipboard_target');\n    }\n\n    clearClipboardTargets() {\n        this.getClipboardTargets().forEach((target) => {\n            target.remove();\n        });\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async setClipboard(item) {\n        if (!this.#clipboard) {\n            await this.renderClipboard();\n        }\n\n        this.updateClipboard(item);\n        await this.updateClipboardTargets(item);\n    }\n}"],"names":["constructor","baseFactory","blockElement","element","AbortController","document","createElement","html","js","Promise","resolve","reject","render","then","async","fail","Templates","replaceNode","_classPrivateFieldGet","querySelectorAll","forEach","sectionTitle","button","cloneNode","after","sectionId","dataset","itemid","addEventListener","addSectionBackupToSharingCart","bind","this","courseModuleActionMenu","append","courseModuleId","cmid","addCourseModuleBackupToSharingCart","prepend","querySelector","onClearClipboard","e","preventDefault","stopPropagation","clearClipboard","classList","add","clearClipboardTargets","updateClipboard","item","innerHTML","getItemInfo","remove","abort","section","clipboardTarget","closest","id","confirmImportBackupFromSharingCart","signal","getSectionName","innerText","trim","getClipboardTargets","target","renderClipboard","updateClipboardTargets"],"mappings":"skDA8BIA,YAAYC,YAAaC,aAAcC,+RAP1B,kGAK6B,IAAIC,0DAGtBH,sDACCC,kDACLC,mDAIZA,QAAUE,SAASC,cAAc,aAC/BC,KAACA,KAADC,GAAOA,UAAY,IAAIC,SAAQ,CAACC,QAASC,6BACjCC,OAAO,6DAA8D,IAC1EC,MAAKC,MAAOP,KAAMC,MACfE,QAAQ,CACJH,KAAAA,KACAC,GAAAA,QAELO,KAAKJ,WAEhBR,cAAgBa,mBAAUC,YACtBd,QACAI,KACAC,IACF,GAEoBU,qCAAcC,iBAAiB,2CACvCC,SAASC,qBACbC,OAASnB,QAAQoB,WAAU,GAEjCF,aAAaG,MAAMF,cAEbG,UAAYJ,aAAaK,QAAQC,OAEvCL,OAAOM,iBACH,QACAV,0CAAmBW,8BAA8BC,2BAAKC,oBAAoBN,eAIlDP,qCAAcC,iBAAiB,mBACvCC,SAASY,+BACvBV,OAASnB,QAAQoB,WAAU,GAEjCS,uBAAuBC,OAAOX,cAExBY,eAAiBF,uBAAuBN,QAAQS,KAEtDb,OAAOM,iBACH,QACAV,0CAAmBkB,mCAAmCN,2BAAKC,oBAAoBG,kFAMrE7B,SAASC,cAAc,cAEnCC,KAACA,KAADC,GAAOA,UAAY,IAAIC,SAAQ,CAACC,QAASC,6BACjCC,OAAO,4CAA6C,IACzDC,MAAKC,MAAOP,KAAMC,MACfE,QAAQ,CACJH,KAAAA,KACAC,GAAAA,QAELO,KAAKJ,uDAEQK,mBAAUC,kCAC9Bc,iBACAxB,KACAC,IACF,yCAEY6B,8BAAQN,kBAEOb,uCAAgBoB,cAAc,mCACtCV,iBACjB,QACAG,KAAKQ,iBAAiBT,KAAKC,OAOnCQ,iBAAiBC,GACbA,EAAEC,iBACFD,EAAEE,uBAEGC,iBAGTA,wDACoBC,UAAUC,IAAI,eACzBC,kEAEcH,iBAMvBI,gBAAgBC,6CACIJ,UAAUC,IAAI,UAEJ3B,uCAAgBoB,cAAc,SACtCW,UAAYD,KAAKE,cAAcD,iDAEjCL,UAAUO,OAAO,uCAMRH,UACrB7C,QAAUE,SAASC,cAAc,aAC/BC,KAACA,KAADC,GAAOA,UAAY,IAAIC,SAAQ,CAACC,QAASC,6BACjCC,OAAO,mDAAoD,IAChEC,MAAKC,MAAOP,KAAMC,MACfE,QAAQ,CACJH,KAAAA,KACAC,GAAAA,QAELO,KAAKJ,WAEhBR,cAAgBa,mBAAUC,YACtBd,QACAI,KACAC,IACF,uEAE2C4C,2EACE,IAAIhD,sDAErCe,iBAAiB,uBAAuBC,SAASiC,0CACrDC,8CAAkBD,QAAQf,cAAc,4EAAwBnC,QAAQoB,WAAU,GAExF8B,QAAQhB,QAAQiB,uBAEV7B,UAAY4B,QAAQE,QAAQ,wBAAwB7B,QAAQ8B,GAElEF,gBAAgB1B,iBACZ,QACAV,0CAAmBuC,mCAAmC3B,2BAAKC,oBAAoBiB,KAAMvB,WACrF,CACIiC,OAAQxC,oEAA6CwC,YASrEC,eAAelC,kBACJP,qCAAcoB,sDAA+Cb,8BAA4BmC,UAAUC,OAG9GC,6BACW5C,qCAAcC,iBAAiB,qBAG1C2B,6BACSgB,sBAAsB1C,SAAS2C,SAChCA,OAAOZ,+BAOIH,4BACVjB,wBACKA,KAAKiC,uBAGVjB,gBAAgBC,YACfjB,KAAKkC,uBAAuBjB"}