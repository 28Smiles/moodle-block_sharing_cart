{"version":3,"file":"element.min.js","sources":["../../../../src/app/block/course/element.js"],"sourcesContent":["export default class CourseElement {\n    /**\n     * @type {BaseFactory}\n     */\n    #baseFactory;\n\n    /**\n     * @type {BlockElement}\n     */\n    #blockElement;\n\n    /**\n     * @type {HTMLElement}\n     */\n    #element;\n\n    /**\n     * @type {HTMLElement|null}\n     */\n    #clipboard = null;\n\n    /**\n     * @type {AbortController}\n     */\n    #clipboardTargetListenerAbortController = new AbortController();\n\n    /**\n     * @param {BaseFactory} baseFactory\n     * @param {BlockElement} blockElement\n     * @param {HTMLElement} element\n     */\n    constructor(baseFactory, blockElement, element) {\n        this.#baseFactory = baseFactory;\n        this.#blockElement = blockElement;\n        this.#element = element;\n    }\n\n    async renderClipboard() {\n        this.#clipboard = await this.#baseFactory.moodle().template().createElementFromTemplate(\n            'block_sharing_cart/block/course/clipboard',\n            {}\n        );\n\n        this.#element.prepend(this.#clipboard);\n\n        const clearClipboardButton = this.#clipboard.querySelector('[data-action=\"clear-clipboard\"]');\n        clearClipboardButton.addEventListener(\n            'click',\n            this.onClearClipboard.bind(this)\n        );\n    }\n\n    /**\n     * @param {Event} e\n     */\n    onClearClipboard(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.clearClipboard();\n    }\n\n    clearClipboard() {\n        this.#clipboard.classList.add('d-none');\n        this.clearClipboardTargets();\n\n        this.#blockElement.clearClipboard();\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    updateClipboard(item) {\n        this.#clipboard.classList.add('d-none');\n\n        const clipboardItemInfo = this.#clipboard.querySelector('.info');\n        clipboardItemInfo.innerHTML = item.getItemInfo().innerHTML;\n\n        this.#clipboard.classList.remove('d-none');\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async updateClipboardTargets(item) {\n        const element = await this.#baseFactory.moodle().template().createElementFromTemplate(\n            'block_sharing_cart/block/course/clipboard_target',\n            {}\n        );\n\n        this.#clipboardTargetListenerAbortController.abort();\n        this.#clipboardTargetListenerAbortController = new AbortController();\n\n        this.#element.querySelectorAll('[data-for=\"cmlist\"]').forEach((section) => {\n            const clipboardTarget = section.querySelector('.clipboard_target') ?? element.cloneNode(true);\n\n            section.prepend(clipboardTarget);\n\n            const sectionId = section.closest('[data-for=\"section\"]').dataset.id;\n\n            clipboardTarget.classList.remove('hidden');\n            clipboardTarget.parentElement.classList.remove('hidden');\n            clipboardTarget.addEventListener(\n                'click',\n                this.#blockElement.confirmImportBackupFromSharingCart.bind(this.#blockElement, item, sectionId),\n                {\n                    signal: this.#clipboardTargetListenerAbortController.signal\n                }\n            );\n        });\n    }\n\n    /**\n     * @param {Number} sectionId\n     * @returns {String}\n     */\n    getSectionName(sectionId) {\n        // TODO: Fetch name from webservice to support all course formats\n\n        const sectionNameElement = this.#element.querySelector(`[data-for=\"section\"][data-id=\"${sectionId}\"] .sectionname`);\n        return sectionNameElement?.innerText.trim() ?? 'Unknown';\n    }\n\n    /**\n     * @param {Number} sectionId\n     * @returns {NodeListOf<HTMLElement>}\n     */\n    getSectionCourseModules(sectionId) {\n        return this.#element.querySelectorAll(\n            `[data-for=\"section\"][data-id=\"${sectionId}\"] [data-for=\"cmlist\"] [data-for=\"cmitem\"]`\n        );\n    }\n\n    /**\n     * @param {String} courseModuleId\n     * @returns {String}\n     */\n    getCourseModuleName(courseModuleId) {\n        // TODO: Fetch name from webservice to support all course module types example: mod_labels\n\n        const courseModule = this.#element.querySelector(`[data-for=\"cmitem\"][data-id=\"${courseModuleId}\"]`);\n        return courseModule.querySelector(`.instancename`)?.innerText.trim() ?? 'Unknown';\n    }\n\n    /**\n     * @returns {NodeListOf<HTMLElement>}\n     */\n    getClipboardTargets() {\n        return this.#element.querySelectorAll('.clipboard_target');\n    }\n\n    clearClipboardTargets() {\n        this.getClipboardTargets().forEach((target) => {\n            target.remove();\n        });\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async setClipboard(item) {\n        if (!this.#clipboard) {\n            await this.renderClipboard();\n        }\n\n        this.updateClipboard(item);\n        await this.updateClipboardTargets(item);\n    }\n}"],"names":["constructor","baseFactory","blockElement","element","AbortController","_classPrivateFieldGet","moodle","template","createElementFromTemplate","prepend","this","querySelector","addEventListener","onClearClipboard","bind","e","preventDefault","stopPropagation","clearClipboard","classList","add","clearClipboardTargets","updateClipboard","item","innerHTML","getItemInfo","remove","abort","querySelectorAll","forEach","section","clipboardTarget","cloneNode","sectionId","closest","dataset","id","parentElement","confirmImportBackupFromSharingCart","signal","getSectionName","sectionNameElement","innerText","trim","getSectionCourseModules","getCourseModuleName","courseModuleId","getClipboardTargets","target","renderClipboard","updateClipboardTargets"],"mappings":"02CA+BIA,YAAYC,YAAaC,aAAcC,+RAZ1B,kGAK6B,IAAIC,0DAQtBH,sDACCC,kDACLC,6EAIQE,yCAAkBC,SAASC,WAAWC,0BAC1D,4CACA,0CAGUC,8BAAQC,kBAEOL,uCAAgBM,cAAc,mCACtCC,iBACjB,QACAF,KAAKG,iBAAiBC,KAAKJ,OAOnCG,iBAAiBE,GACbA,EAAEC,iBACFD,EAAEE,uBAEGC,iBAGTA,wDACoBC,UAAUC,IAAI,eACzBC,kEAEcH,iBAMvBI,gBAAgBC,6CACIJ,UAAUC,IAAI,UAEJf,uCAAgBM,cAAc,SACtCa,UAAYD,KAAKE,cAAcD,iDAEjCL,UAAUO,OAAO,uCAMRH,YACnBpB,cAAgBE,yCAAkBC,SAASC,WAAWC,0BACxD,mDACA,wEAGyCmB,2EACE,IAAIvB,sDAErCwB,iBAAiB,uBAAuBC,SAASC,gBACrDC,gBAAkBD,QAAQnB,cAAc,sBAAwBR,QAAQ6B,WAAU,GAExFF,QAAQrB,QAAQsB,uBAEVE,UAAYH,QAAQI,QAAQ,wBAAwBC,QAAQC,GAElEL,gBAAgBZ,UAAUO,OAAO,UACjCK,gBAAgBM,cAAclB,UAAUO,OAAO,UAC/CK,gBAAgBnB,iBACZ,QACAP,0CAAmBiC,mCAAmCxB,2BAAKJ,oBAAoBa,KAAMU,WACrF,CACIM,OAAQlC,oEAA6CkC,YAUrEC,eAAeP,iBAGLQ,mBAAqBpC,qCAAcM,cAAe,iCAAgCsB,mCACjFQ,MAAAA,0BAAAA,mBAAoBC,UAAUC,SAAU,UAOnDC,wBAAwBX,kBACb5B,qCAAcuB,iBAChB,iCAAgCK,uDAQzCY,oBAAoBC,+EAGKzC,qCAAcM,cAAe,gCAA+BmC,oBAC7DnC,cAAe,+EAAiB+B,UAAUC,SAAU,UAM5EI,6BACW1C,qCAAcuB,iBAAiB,qBAG1CP,6BACS0B,sBAAsBlB,SAASmB,SAChCA,OAAOtB,+BAOIH,4BACVb,wBACKA,KAAKuC,uBAGV3B,gBAAgBC,YACfb,KAAKwC,uBAAuB3B"}