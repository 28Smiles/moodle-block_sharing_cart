{"version":3,"file":"element.min.js","sources":["../../../../src/app/block/course/element.js"],"sourcesContent":["export default class CourseElement {\n    /**\n     * @type {BaseFactory}\n     */\n    #baseFactory;\n\n    /**\n     * @type {BlockElement}\n     */\n    #blockElement;\n\n    /**\n     * @type {HTMLElement}\n     */\n    #element;\n\n    /**\n     * @type {HTMLElement|null}\n     */\n    #clipboard = null;\n\n    /**\n     * @type {AbortController}\n     */\n    #clipboardTargetListenerAbortController = new AbortController();\n\n    constructor(baseFactory, blockElement, element) {\n        this.#baseFactory = baseFactory;\n        this.#blockElement = blockElement;\n        this.#element = element;\n    }\n\n    async addBackupToSharingCartButtons() {\n        const element = await this.#baseFactory.moodle().template().createElementFromTemplate(\n            'block_sharing_cart/block/course/add_to_sharing_cart_button',\n            {}\n        );\n\n        const sectionTitles = this.#element.querySelectorAll('.course-section-header .inplaceeditable');\n        sectionTitles.forEach((sectionTitle) => {\n            const button = element.cloneNode(true);\n\n            sectionTitle.after(button);\n\n            const sectionId = sectionTitle.dataset.itemid;\n\n            button.addEventListener(\n                'click',\n                this.#blockElement.addSectionBackupToSharingCart.bind(this.#blockElement, sectionId)\n            );\n        });\n\n        const courseModuleActionMenus = this.#element.querySelectorAll('.cm_action_menu');\n        courseModuleActionMenus.forEach((courseModuleActionMenu) => {\n            const button = element.cloneNode(true);\n\n            courseModuleActionMenu.append(button);\n\n            const courseModuleId = courseModuleActionMenu.dataset.cmid;\n\n            button.addEventListener(\n                'click',\n                this.#blockElement.addCourseModuleBackupToSharingCart.bind(this.#blockElement, courseModuleId)\n            );\n        });\n    }\n\n    async renderClipboard() {\n        this.#clipboard = await this.#baseFactory.moodle().template().createElementFromTemplate(\n            'block_sharing_cart/block/course/clipboard',\n            {}\n        );\n\n        this.#element.prepend(this.#clipboard);\n\n        const clearClipboardButton = this.#clipboard.querySelector('[data-action=\"clear-clipboard\"]');\n        clearClipboardButton.addEventListener(\n            'click',\n            this.onClearClipboard.bind(this)\n        );\n    }\n\n    /**\n     * @param {Event} e\n     */\n    onClearClipboard(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.clearClipboard();\n    }\n\n    clearClipboard() {\n        this.#clipboard.classList.add('d-none');\n        this.clearClipboardTargets();\n\n        this.#blockElement.clearClipboard();\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    updateClipboard(item) {\n        this.#clipboard.classList.add('d-none');\n\n        const clipboardItemInfo = this.#clipboard.querySelector('.info');\n        clipboardItemInfo.innerHTML = item.getItemInfo().innerHTML;\n\n        this.#clipboard.classList.remove('d-none');\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async updateClipboardTargets(item) {\n        const element = await this.#baseFactory.moodle().template().createElementFromTemplate(\n            'block_sharing_cart/block/course/clipboard_target',\n            {}\n        );\n\n        this.#clipboardTargetListenerAbortController.abort();\n        this.#clipboardTargetListenerAbortController = new AbortController();\n\n        this.#element.querySelectorAll('[data-for=\"cmlist\"]').forEach((section) => {\n            const clipboardTarget = section.querySelector('.clipboard_target') ?? element.cloneNode(true);\n\n            section.prepend(clipboardTarget);\n\n            const sectionId = section.closest('[data-for=\"section\"]').dataset.id;\n\n            clipboardTarget.classList.remove('hidden');\n            clipboardTarget.parentElement.classList.remove('hidden');\n            clipboardTarget.addEventListener(\n                'click',\n                this.#blockElement.confirmImportBackupFromSharingCart.bind(this.#blockElement, item, sectionId),\n                {\n                    signal: this.#clipboardTargetListenerAbortController.signal\n                }\n            );\n        });\n    }\n\n    /**\n     * @param {Number} sectionId\n     */\n    getSectionName(sectionId) {\n        return this.#element.querySelector(`[data-for=\"section\"][data-id=\"${sectionId}\"] .sectionname`).innerText.trim();\n    }\n\n    /**\n     * @param {String} courseModuleId\n     */\n    getCourseModuleName(courseModuleId) {\n        // TODO: Fetch name from webservice to support all course module types example: mod_labels\n\n        const courseModule = this.#element.querySelector(`[data-for=\"cmitem\"][data-id=\"${courseModuleId}\"]`);\n        return courseModule.querySelector(`.instancename`)?.innerText.trim() ?? 'Unknown';\n    }\n\n    getClipboardTargets() {\n        return this.#element.querySelectorAll('.clipboard_target');\n    }\n\n    clearClipboardTargets() {\n        this.getClipboardTargets().forEach((target) => {\n            target.remove();\n        });\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async setClipboard(item) {\n        if (!this.#clipboard) {\n            await this.renderClipboard();\n        }\n\n        this.updateClipboard(item);\n        await this.updateClipboardTargets(item);\n    }\n}"],"names":["constructor","baseFactory","blockElement","element","AbortController","_classPrivateFieldGet","moodle","template","createElementFromTemplate","querySelectorAll","forEach","sectionTitle","button","cloneNode","after","sectionId","dataset","itemid","addEventListener","addSectionBackupToSharingCart","bind","this","courseModuleActionMenu","append","courseModuleId","cmid","addCourseModuleBackupToSharingCart","prepend","querySelector","onClearClipboard","e","preventDefault","stopPropagation","clearClipboard","classList","add","clearClipboardTargets","updateClipboard","item","innerHTML","getItemInfo","remove","abort","section","clipboardTarget","closest","id","parentElement","confirmImportBackupFromSharingCart","signal","getSectionName","innerText","trim","getCourseModuleName","_courseModule$querySe2","getClipboardTargets","target","renderClipboard","updateClipboardTargets"],"mappings":"02CA0BIA,YAAYC,YAAaC,aAAcC,+RAP1B,kGAK6B,IAAIC,0DAGtBH,sDACCC,kDACLC,qDAIVA,cAAgBE,yCAAkBC,SAASC,WAAWC,0BACxD,6DACA,IAGkBH,qCAAcI,iBAAiB,2CACvCC,SAASC,qBACbC,OAAST,QAAQU,WAAU,GAEjCF,aAAaG,MAAMF,cAEbG,UAAYJ,aAAaK,QAAQC,OAEvCL,OAAOM,iBACH,QACAb,0CAAmBc,8BAA8BC,2BAAKC,oBAAoBN,eAIlDV,qCAAcI,iBAAiB,mBACvCC,SAASY,+BACvBV,OAAST,QAAQU,WAAU,GAEjCS,uBAAuBC,OAAOX,cAExBY,eAAiBF,uBAAuBN,QAAQS,KAEtDb,OAAOM,iBACH,QACAb,0CAAmBqB,mCAAmCN,2BAAKC,oBAAoBG,wFAM/DnB,yCAAkBC,SAASC,WAAWC,0BAC1D,4CACA,0CAGUmB,8BAAQN,kBAEOhB,uCAAgBuB,cAAc,mCACtCV,iBACjB,QACAG,KAAKQ,iBAAiBT,KAAKC,OAOnCQ,iBAAiBC,GACbA,EAAEC,iBACFD,EAAEE,uBAEGC,iBAGTA,wDACoBC,UAAUC,IAAI,eACzBC,kEAEcH,iBAMvBI,gBAAgBC,6CACIJ,UAAUC,IAAI,UAEJ9B,uCAAgBuB,cAAc,SACtCW,UAAYD,KAAKE,cAAcD,iDAEjCL,UAAUO,OAAO,uCAMRH,YACnBnC,cAAgBE,yCAAkBC,SAASC,WAAWC,0BACxD,mDACA,wEAGyCkC,2EACE,IAAItC,sDAErCK,iBAAiB,uBAAuBC,SAASiC,0CACrDC,8CAAkBD,QAAQf,cAAc,4EAAwBzB,QAAQU,WAAU,GAExF8B,QAAQhB,QAAQiB,uBAEV7B,UAAY4B,QAAQE,QAAQ,wBAAwB7B,QAAQ8B,GAElEF,gBAAgBV,UAAUO,OAAO,UACjCG,gBAAgBG,cAAcb,UAAUO,OAAO,UAC/CG,gBAAgB1B,iBACZ,QACAb,0CAAmB2C,mCAAmC5B,2BAAKC,oBAAoBiB,KAAMvB,WACrF,CACIkC,OAAQ5C,oEAA6C4C,YASrEC,eAAenC,kBACJV,qCAAcuB,sDAA+Cb,8BAA4BoC,UAAUC,OAM9GC,oBAAoB7B,qIAGKnB,qCAAcuB,qDAA8CJ,sBAC7DI,wEAAb0B,uBAA6CH,UAAUC,8DAAU,UAG5EG,6BACWlD,qCAAcI,iBAAiB,qBAG1C2B,6BACSmB,sBAAsB7C,SAAS8C,SAChCA,OAAOf,+BAOIH,4BACVjB,wBACKA,KAAKoC,uBAGVpB,gBAAgBC,YACfjB,KAAKqC,uBAAuBpB"}